*****************************************************************************
* SPDX-FileCopyrightText: Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
* SPDX-License-Identifier: LicenseRef-NvidiaProprietary
*
* NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
* property and proprietary rights in and to this material, related
* documentation and any modifications thereto. Any use, reproduction,
* disclosure or distribution of this material and related documentation
* without an express license agreement from NVIDIA CORPORATION or
* its affiliates is strictly prohibited.
*****************************************************************************

*****************************************************************************
                     deepstream-demuxer-dynamic
                             README
*****************************************************************************

===============================================================================
1. Prerequisites:
===============================================================================
Please follow instructions in the apps/sample_apps/deepstream-app/README on how
to install the prerequisites for Deepstream SDK, the DeepStream SDK itself and the
apps.

You must have the following development packages installed
   GStreamer-1.0
   GStreamer-1.0 Base Plugins
   GStreamer-1.0 gstrtspserver
   X11 client-side library

To install these packages, execute the following command:
   sudo apt-get install libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev \
   libgstrtspserver-1.0-dev libx11-dev

This example can be configured to use either the nvinfer or the nvinferserver
element for inference.
If nvinferserver is selected, the Triton Inference Server is used for inference
processing. In this case, the example needs to be run inside the
DeepStream-Triton docker container. Please refer
samples/configs/deepstream-app-triton/README for the steps to download the
container image and setup model repository.

===============================================================================
2. Purpose:
===============================================================================

This document shall describe the deepstream-demuxer-dynamic application.

It is meant for demonstration of how to dynamically add a demuxer and its
associated elements to a DeepStream pipeline during runtime. The application
showcases flexible stream management, enabling on-the-fly addition of new
sources and processing branches without reconstructing the entire pipeline.

===============================================================================
3. To compile:
===============================================================================

  $ Set CUDA_VER in the MakeFile as per platform.
     For x86, CUDA_VER=12.8
     For jetson, CUDA_VER=13.0
  $ sudo make (sudo not required in case of docker containers)

===============================================================================
4. Usage:
===============================================================================

    Run with the yml file. In this method, user needs to update the yml file to configure
    pipeline properties.

    $ ./deepstream-demuxer-dynamic <yml file>
    e.g. ./deepstream-demuxer-dynamic ds_dynamic_demuxer_config.yml

NOTE: To compile the sources, run make with "sudo" or root permission.

This application accepts one or more H.264/H.265/RTSP video streams as input using the
"nvmultiurisrcbin" element. It creates a source bin for each input and connects the bins
to an instance of the "pgie" element for batched inferencing. The first bin (bin1) consists
of the following pipeline:

nvmultiurisrcbin -> pgie -> tee_0 -> queue -> nvvideoconvert -> nvmultistreamtiler -> nvdsosd -> sink.

The "tee" element allows for multiple branches to be created from the same source stream.
When the first stream is added through the REST API, a second bin (bin2) is dynamically
created and linked to the second tee output (tee_1). This second bin consists of:

queue -> nvmultistreamdemux.

For each subsequent stream added via the REST API, a new source pad is dynamically created on
the existing "nvmultistreamdemux" element.

For each source pad of the "nvmultistreamdemux", the application dynamically creates a new
processing branch. Each branch consists of a queue, followed by an "nvdsosd" element for o
n-screen display, and finally a sink element.

This application showcases advanced stream management techniques, enabling users to dynamically
add new processing branches without reconstructing the entire pipeline. It highlights the
flexibility of the DeepStream SDK in adapting to varying input sources and managing multiple
streams concurrently.

The key feature of this application is its ability to dynamically create and link new elements and
pads to the pipeline during runtime, demonstrating real-time modifications to video stream processing
workflows. This approach allows for efficient handling of multiple streams while maintaining a
flexible and scalable pipeline structure.

NOTE:
$ When providing URIs in the uri-list, ensure there are no spaces between the URIs. The correct
  format is <uri1>,<uri2>,<uri3> and not <uri1>, <uri2>, <uri3>. Spaces between URIs may cause
  parsing errors and unexpected behavior.

===============================================================================

To add sources using the REST API, you can use the following curl command in a separate terminal:

for ((i=1; i<={count}; i++))
do
  curl -XPOST 'http://localhost:9010/api/v1/stream/add' -d '{
  "key": "sensor",
  "value": {
      "camera_id": "'"${i}"'",
      "camera_url": "file:///opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h264.mp4",
      "change": "camera_add",
      "metadata": {
          "resolution": "1920 x1080",
          "codec": "h264",
          "framerate": 30
      }
  },
  "headers": {
      "source": "vst",
      "created_at": "2021-06-01T14:34:13.417Z"
  }
}'

sleep 5
done

Replace {count} with the number of sources you want to add. Make sure to adjust the max-batch-size
in the configuration file accordingly.

NOTE: Run this curl command in a separate terminal while the main application is running.


ToDo: Add fix in demuxer to support multiple stream addition at a time.




